security:
    encoders:
        App\Entity\User:
            algorithm: sha512
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    role_hierarchy:
        ROLE_ADMIN:       [ROLE_USER]
    providers:
        users_in_memory: { memory: null }
        pdadmin_auth:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        backend:
            pattern:    ^/
            provider: pdadmin_auth
            user_checker: Pd\UserBundle\Security\UserChecker
            anonymous: true
            switch_user: true
            http_basic: ~
            form_login:
                use_referer: true
                login_path: security_login
                check_path: security_login
                default_target_path: 'easyadmin'
                csrf_token_generator: security.csrf.token_manager
            logout:
                path: security_logout
                #target: 'home' # Logout Redirect Path
            remember_me:
                secret:   '%env(APP_SECRET)%'
                #lifetime: 604800
                path:     /
        main:
            anonymous: lazy
            provider: users_in_memory

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/auth/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/auth/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/auth/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/backend/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
